---
layout: layout.njk
pageTitle: Inventory
bodyClass: inner
headerClass: alt fixedStackedHeader
---

<!-- Page info -->
<div class="page-top-info">
	<div class="container">
		<div class="back-link">
			<a href="#"></a>
		</div>
		<h1>Inventory</h1>
	</div>
</div>
<!-- Page info end -->


<!-- Category section -->
<section class="category-section spad">
  <div class="container">
    <div class="row" id="preact-area"> </div><!-- END .row  -->
  </div><!-- END .container  -->
</section>

<script type="module">
  import { html, Component, render } from 'https://unpkg.com/htm/preact/standalone.module.js';

  class App extends Component {
		constructor(props){
			super(props);

			const minYearOption = props.siteData.cars.reduce((min, p) => p.modelYear < min ? p.modelYear : min, props.siteData.cars[0].modelYear);
			const maxYearOption = props.siteData.cars.reduce((max, p) => p.modelYear > max ? p.modelYear : max, props.siteData.cars[0].modelYear);

			this.state = {
				cars: props.siteData.cars,
				currentSort: '-modelYear',
				display: 'list',
				location: 'All',
				makeFilter: 'All',
				minPrice: 0,
				maxPrice: 999999,
				minYearOption,
				maxYearOption,
				minYear: minYearOption,
				maxYear: maxYearOption,
				maxMileage: 9999999,
				showClearButton: false
			}
		}

		//initial sort of cars
		componentDidMount(){
			this.handleSort('-modelYear')
		}

		/*
		* clear filter function
		*/
		clearFilters(){
			const minYearOption = this.props.siteData.cars.reduce((min, p) => p.modelYear < min ? p.modelYear : min, this.props.siteData.cars[0].modelYear);
			const maxYearOption = this.props.siteData.cars.reduce((max, p) => p.modelYear > max ? p.modelYear : max, this.props.siteData.cars[0].modelYear);

			this.setState({
				location: 'All',
				makeFilter: 'All',
				minPrice: 0,
				maxPrice: 999999,
				minYearOption,
				maxYearOption,
				minYear: minYearOption,
				maxYear: maxYearOption,
				maxMileage: 9999999,
				showClearButton: false
			}, () => {
				this.filterCars()
			})
		}


		/*
		* filter function
		*/
		filterCars(){
			let cars = this.props.siteData.cars.filter(car => car.price < this.state.maxPrice && car.price > this.state.minPrice)
			cars = cars.filter(car => car.modelYear <= this.state.maxYear && car.modelYear >= this.state.minYear)
			cars = cars.filter(car => car.mileage <= this.state.maxMileage)
			if(this.state.makeFilter !== 'All'){
				cars = cars.filter(car => car.make ===	 this.state.makeFilter)
			}
			if(this.state.location !== 'All'){
				cars = cars.filter(car => car.location == this.state.location)
			}
			this.setState({cars}, () => {
				this.handleSort(this.state.currentSort)
			})
		}

		/*
		* Sort function
		*/
	  handleSort(val) {
			function dynamicSort(property) {
		    var sortOrder = 1;
		    if(property[0] === "-") {
		        sortOrder = -1;
		        property = property.substr(1);
		    }
		    return function (a,b) {
		        var result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;
		        return result * sortOrder;
		    }
			}

			const sortedCars = [...this.state.cars].sort(dynamicSort(val));

	    this.setState({cars: sortedCars, currentSort: val})
	  }



		/*
		* PRICE
		*/
	  handlePriceChange(val) {
			const minPrice = val.split('-')[0]
			const maxPrice = val.split('-')[1]
	    this.setState({maxPrice, minPrice, showClearButton: true}, () => {
				this.filterCars();
			});
	  }

		renderPriceFilter(){
			return html`
        <div class="filterBlock">
        	<label>Price</label>
          <select value="${this.state.minPrice}-${this.state.maxPrice}" onInput=${(event) => this.handlePriceChange(event.target.value)}>
            <option value="0-4999">Under $5,000</option>
            <option value="5000-9999">$5,000 - $9,999</option>
            <option value="10000-14999">$10,000 - $14,999</option>
            <option value="15000-19999">$15,000 - $19,999</option>
            <option value="20000-24999">$20,000 - $24,999</option>
            <option value="25000-29999">$25,000 - $29,999</option>
            <option value="0-999999">Any</option>
          </select>
        </div>
			`;
		}
		//END PRICE

		/*
		* MILEAGE
		*/
	  handleMileageChange(val) {
	    this.setState({ maxMileage: val, showClearButton: true },() => {
				this.filterCars();
			});
	  }

		renderMileageFilter(){
			return html`
        <div class="filterBlock">
        	<label>Max Mileage</label>
          <select value="${this.state.maxMileage}" onInput=${(event) => this.handleMileageChange(event.target.value)}>
            <option value="50000">50,000</option>
            <option value="100000">100,000</option>
            <option value="150000">150,000</option>
            <option value="200000">200,000</option>
            <option value="9999999">Any</option>
          </select>
        </div>
			`;
		}
		//END MILEAGE

		/*
		* LOCATION
		*/
	  handleLocationChange(val) {
	    this.setState({ location: val, showClearButton: true },() => {
				this.filterCars();
			});
	  }

		renderLocationFilter(){
			const countedLocations = this.props.siteData.cars.reduce(function (acc, curr) {
			  if (typeof acc[curr.location] == 'undefined') {
			    acc[curr.location] = 1;
			  } else {
			    acc[curr.location] += 1;
			  }

			  return acc;
			}, {});

			const locationDetails = {}
			this.props.siteData.locations.forEach(location => {
				locationDetails[location._id] = `${location.street1}\n${location.city}`
			})

			return html`
        <div class="filterBlock">
        	<label>Location</label>
          <select value="${this.state.location}" onInput=${(event) => this.handleLocationChange(event.target.value)}>
            <option value="All">All</option>
						${Object.keys(countedLocations).map((key, index) => html`
		            <option key="locationOption_${index}" value="${key}">${locationDetails[key]} (${countedLocations[key]})</option>
							`)}
          </select>
        </div>
			`;
		}
		//END LOCATION


		/*
		* MAKE
		*/
	  handleMakeChange(val) {
	    this.setState({ makeFilter: val, showClearButton: true },() => {
				this.filterCars();
			});
	  }

		renderMakeFilter(){
			const countedMakes = this.props.siteData.cars.reduce(function (acc, curr) {
			  if (typeof acc[curr.make] == 'undefined') {
			    acc[curr.make] = 1;
			  } else {
			    acc[curr.make] += 1;
			  }

			  return acc;
			}, {});

			return html`
        <div class="filterBlock">
        	<label>Make</label>
          <select value="${this.state.makeFilter}" onInput=${(event) => this.handleMakeChange(event.target.value)}>
            <option value="All">All</option>
						${Object.keys(countedMakes).map((key, index) => html`
		            <option key="makeOption_${index}" value="${key}">${key} (${countedMakes[key]})</option>
							`)}
          </select>
        </div>
			`;
		}
		//END MAKE

		/*
		* YEAR
		*/
	  handleYearChange(val, minOrMax) {
	    this.setState({
				minYear: minOrMax === 'minYear' ? val : this.state.minYear,
				maxYear: minOrMax === 'maxYear' ? val : val > this.state.maxYear ? val : this.state.maxYear,
				showClearButton: true
			},() => {
				this.filterCars();
			});
	  }

		renderYearFilter(){
			const years = this.props.siteData.cars.map((car) => car.modelYear);
			const uniqYears = [ ...new Set(years) ].sort();

			const getMinYearOptions = () => {
				return html`
					${uniqYears.map((year, index) => html`
            <option key="minyearOption_${index}" value="${year}">${year}</option>
					`)}
				`;
			}
			const getMaxYearOptions = () => {
				const filteredYears = uniqYears.filter(y => y >= this.state.minYear)
				return html`
					${filteredYears.map((year, index) => html`
            <option key="maxYearOption_${index}" value="${year}">${year}</option>
					`)}
				`;
			}

			return html`
        <div class="filterBlock">
        	<label>Year</label>
          <select style="width:70px;margin-right:8px;" value="${this.state.minYear}" onInput=${(event) => this.handleYearChange(event.target.value, 'minYear')}>
						${getMinYearOptions()}
          </select>
					<span style="margin-right:8px;">TO</span>
          <select style="width:70px;" value="${this.state.maxYear}" onInput=${(event) => this.handleYearChange(event.target.value, 'maxYear')}>
						${getMaxYearOptions()}
          </select>
        </div>
			`;
		}
		//END YEAR

		renderSidebar(){
			return html`
	      <div class="col-lg-3 order-2 order-lg-1">
	        <div class="filter-widget">
	          <h2 class="fw-title">Filter Vehicles</h2>
							${this.renderPriceFilter()}
							${this.renderYearFilter()}
							${this.renderMileageFilter()}
							${this.renderMakeFilter()}
							${this.renderLocationFilter()}
							<button class="site-btn" style="${this.state.showClearButton === true ? 'display:block' : 'display:none'}" onClick="${() => {this.clearFilters()}}">Clear Filters</button>
					</div>
				</div>
			`;
		}

		renderCars(s){
      return html`
				<div class="col-lg-9 order-1 order-lg-2 mb-5 mb-lg-0">
					<div class="row" style="margin-bottom:4px;">
	          <div class="col-md-6 col-xs-12 sortWrap">
							Sort By:
		          <select value="${this.state.currentSort}" onInput=${(event) => this.handleSort(event.target.value)}>
		            <option value="price">Price: Low → High</option>
		            <option value="-price">Price: High → Low</option>
		            <option value="mileage">Mileage: Low → High</option>
		            <option value="-mileage">Mileage: High → Low</option>
		            <option value="modelYear">Year: Old → New</option>
		            <option value="-modelYear">Year: New → Old</option>
							</select>
						</div>
	          <div class="col-md-6 col-xs-12 viewWrap">
							View:
 							<button class="btn ${this.state.display === 'list' ? 'active' : ''}" onClick=${(event) => {this.setState({display: 'list'})}}>
							  <i class="fa fa-list" />
							</button>
 							<button class="btn ${this.state.display === 'grid' ? 'active' : ''}" onClick=${(event) => {this.setState({display: 'grid'})}}>
							  <i class="fa fa-th" />
							</button>
						</div>
					</div>
	        <div class="${this.state.display === 'grid' ? 'row' : 'row listView'}">
			      ${this.state.cars.map(car => html`
		          <div class="${this.state.display === 'grid' ? 'col-xl-4 col-lg-6 col-md-6' : 'col-sm-12'}" key="${car.id}">
		            <div class="product-item">
		              <div class="pi-pic" style="background-image:url(${car.images[0].url})" title="${car.modelYear} ${car.make} ${car.model}" >
		                <div class="pi-links">
		                  <a
		                    href="/inventory/${car.modelYear}-${car.make}-${car.model}-${car.carId}"
		                    class="add-card"
		                    ><i class="fa fa-arrow-right"></i
		                    ><span>View Details</span></a
		                  >
		                </div>
		              </div>
		              <a class="pi-text-wrap" href="/inventory/${car.modelYear}-${car.make}-${car.model}-${car.carId}" >
		                <div class="pi-text">
		                  <div class="titleArea">
		                    <span>${car.modelYear} ${car.make} ${car.model}
													<span class="soldSpan" style="${car.status === 'sold' ? '' : 'display:none;'}">SOLD</span>
												</span>
		                    <h6>$${car.price}</h6>
		                  </div>
		                  <div class="details">
		                    <span>
													<${MileageSVG} />
		                      <span style="padding-left:4px">${car.mileage} Miles</span>
		                    </span>
		                    <span>
													<${TransmissionSVG} />
		                      <span style="padding-left:4px">${car.transmissionStyle}</span>
		                    </span>
		                    <span>
													<${GasPumpSVG} />
		                      <span style="padding-left:4px">${car.mpgCity} city / ${car.mpgHighway} highway</span>
		                    </span>
		                    <span>
													<${EngineSVG} />
		                      <span style="padding-left:4px">${car.displacementL}L ${car.engineConfiguration}${car.engineCylinders}</span>
		                    </span>
		                    <span>
													<${PaintSVG} />
		                      <span style="padding-left:4px">${car.exteriorColor} / ${car.interiorColor}</span>
		                    </span>
		                    <span>
													<${DoorSVG} />
		                      <span style="padding-left:4px">${car.doors} Door</span>
		                    </span>
		                  </div>
		                </div><!-- END .pi-text  -->
		              </a>
		            </div><!-- END .product-item  -->
		          </div><!-- END .col-lg-4  -->
			      `)}
	        </div>
				</div>
      `;
		}

    render({ page }, { todos = [] }) {
			console.log(this.props.siteData)
			return(
				html`
					${this.renderSidebar()}
					${this.renderCars()}
				`
			)
    }
  }

	const DoorSVG = () => html`<svg style="height:21px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 59 43"><g fill="#000" fill-rule="evenodd"><path d="M58 44H1a1 1 0 01-1-1V20.372a1 1 0 01.403-.803L26.46.198A.997.997 0 0127.057 0H58a1 1 0 011 1v42a1 1 0 01-1 1zM2 42h55V2H27.388L2 20.874z"/><path d="M53 23H7.143a1.001 1.001 0 01-.609-1.794L27.392 5.207A.997.997 0 0128 5h25a1 1 0 011 1v16a1 1 0 01-1 1zm-42.911-2H52V7H28.34zM46 35a1 1 0 01-1-1v-6a1 1 0 011-1h7a1 1 0 110 2h-6v5a1 1 0 01-1 1"/></g></svg>`

	const GasPumpSVG = () => html`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 110 105.5"><path d="M96 22.5L82.1 8.7c-.8-.8-2.1-.8-2.9 0-.8.8-.8 2.1 0 2.9l4.3 4.3v15.9c0 3.4 2.7 6.1 6.1 6.1h5.7V97c0 1.1-.9 2-2 2h-4.9c-1.1 0-2-.9-2-2V65.1c0-3.4-2.7-6.1-6.1-6.1h-5.1V9.1c0-3.4-2.7-6.1-6.1-6.1H24.7c-3.4 0-6.1 2.7-6.1 6.1v87.6c0 3.4 2.7 6.1 6.1 6.1h44.4c3.4 0 6.1-2.7 6.1-6.1V63.1h5.1c1.1 0 2 .9 2 2v31.8c0 3.4 2.7 6.1 6.1 6.1h4.9c3.4 0 6.1-2.7 6.1-6.1v-66c0-2.8-1.5-6.4-3.4-8.4zM66.6 34.4c0 3.4-2.7 6.1-6.1 6.1H33.2c-3.4 0-6.1-2.7-6.1-6.1V19.3c0-3.4 2.7-6.1 6.1-6.1h27.3c3.4 0 6.1 2.7 6.1 6.1zm23.1-.6c-1.1 0-2-.9-2-2V19.9l5.5 5.5c1.2 1.2 2.3 3.8 2.3 5.5v2.9z"/></svg>`

	const EngineSVG = () => html`<svg style="height:27px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><switch transform="translate(-.433 1.243)"><g><path d="M93.83 35.801H81.483v7.409h-3.702v-4.936a2.472 2.472 0 00-2.474-2.474h-7.404v-3.7a4.939 4.939 0 00-4.937-4.936H50.615v-3.708h9.884c.68 0 1.228-.548 1.228-1.234v-2.468a1.23 1.23 0 00-1.228-1.234H28.396c-.686 0-1.234.554-1.234 1.234v2.468c0 .686.548 1.234 1.234 1.234h9.878v3.708h-9.878a4.944 4.944 0 00-4.942 4.936H16.05a2.465 2.465 0 00-2.468 2.468V49.38H8.639V32.1s-4.936 0-4.936 6.175v7.403c0 3.702 1.234 3.702 1.234 3.702v16.053c0 4.322 3.702 4.936 3.702 4.936v-17.28h4.942V67.9a2.465 2.465 0 002.468 2.468h11.112l11.112 11.111H72.84a4.94 4.94 0 004.941-4.936v-4.941h3.702v7.409H93.83s3.702-6.176 3.702-21.603c0-15.431-3.702-21.607-3.702-21.607zM90.128 74.07H86.42v-7.403H75.308a2.47 2.47 0 00-2.468 2.468v7.409H39.508L28.396 65.433h-9.878V37.035h7.404a2.466 2.466 0 002.474-2.468V32.1h34.571v6.175a2.47 2.47 0 002.469 2.468h7.404v4.936a2.469 2.469 0 002.468 2.468H86.42v-7.403h3.708s2.468 7.403 2.468 16.703c0 9.22-2.468 16.623-2.468 16.623z"/></g></switch></svg>`

	const TransmissionSVG = () => html`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="12 12 76 76" style="enable-background:new 0 0 100 100;" xml:space="preserve"><g><path d="M50,13c-20.4,0-37,16.6-37,37s16.6,37,37,37s37-16.6,37-37S70.4,13,50,13z M50,83c-18.2,0-33-14.8-33-33s14.8-33,33-33   s33,14.8,33,33S68.2,83,50,83z"/><path d="M65,28c-2.2,0-4,1.8-4,4c0,1.5,0.8,2.8,2,3.4V49H52V35.4c1.2-0.7,2-2,2-3.4c0-2.2-1.8-4-4-4s-4,1.8-4,4   c0,1.5,0.8,2.8,2,3.4V49H37V35.4c1.2-0.7,2-2,2-3.4c0-2.2-1.8-4-4-4s-4,1.8-4,4c0,1.5,0.8,2.8,2,3.4v29.1c-1.2,0.7-2,2-2,3.4   c0,2.2,1.8,4,4,4s4-1.8,4-4c0-1.5-0.8-2.8-2-3.4V53h11v11.6c-1.2,0.7-2,2-2,3.4c0,2.2,1.8,4,4,4s4-1.8,4-4c0-1.5-0.8-2.8-2-3.4V53   h11c2.2,0,4-1.8,4-4V35.4c1.2-0.7,2-2,2-3.4C69,29.8,67.2,28,65,28z"/></g></svg>`

  const MileageSVG = () => html`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve"><g><path d="M53.681,18.908c-0.405-1.634-1.807-2.732-3.49-2.732c0,0-0.001,0-0.001,0c-1.683,0-3.086,1.097-3.497,2.754L40.45,45.514   c-0.858,1.625-1.293,3.339-1.293,5.097c0,6.084,4.95,11.033,11.034,11.033c6.084,0,11.033-4.95,11.033-11.033   c0-1.812-0.456-3.567-1.357-5.221L53.681,18.908z M50.191,57.815c-3.973,0-7.204-3.231-7.204-7.204   c0-1.186,0.317-2.357,0.941-3.478c0.086-0.155,0.151-0.322,0.192-0.495l6.069-25.847l6.012,25.733   c0.042,0.182,0.111,0.358,0.205,0.52c0.656,1.139,0.989,2.339,0.989,3.566C57.395,54.584,54.164,57.815,50.191,57.815z"/><path d="M50,2.5C23.808,2.5,2.5,23.808,2.5,50c0,26.191,21.308,47.5,47.5,47.5c26.191,0,47.5-21.308,47.5-47.5   C97.5,23.808,76.192,2.5,50,2.5z M50,93.67C25.92,93.67,6.33,74.08,6.33,50C6.33,25.92,25.92,6.33,50,6.33   C74.08,6.33,93.67,25.92,93.67,50C93.67,74.08,74.08,93.67,50,93.67z"/><path d="M31.248,66.046l-6.67,6.669c-0.748,0.747-0.748,1.96,0,2.708c0.374,0.374,0.864,0.561,1.354,0.561s0.98-0.187,1.354-0.561   l6.67-6.669c0.748-0.747,0.748-1.96,0-2.708C33.208,65.298,31.996,65.298,31.248,66.046z"/><path d="M27.309,50c0-1.057-0.857-1.915-1.915-1.915h-9.432c-1.057,0-1.915,0.857-1.915,1.915c0,1.057,0.857,1.915,1.915,1.915   h9.432C26.452,51.915,27.309,51.058,27.309,50z"/><path d="M31.248,33.955c0.374,0.374,0.864,0.561,1.354,0.561s0.98-0.187,1.354-0.561c0.748-0.747,0.748-1.96,0-2.708l-6.67-6.67   c-0.747-0.748-1.961-0.748-2.708,0c-0.748,0.747-0.748,1.96,0,2.708L31.248,33.955z"/><path d="M67.4,34.516c0.49,0,0.98-0.187,1.354-0.561l6.669-6.67c0.748-0.748,0.748-1.96,0-2.708c-0.748-0.747-1.96-0.747-2.708,0   l-6.669,6.67c-0.748,0.748-0.748,1.96,0,2.708C66.42,34.329,66.91,34.516,67.4,34.516z"/><path d="M84.039,48.085h-9.433c-1.057,0-1.915,0.857-1.915,1.915c0,1.057,0.857,1.915,1.915,1.915h9.433   c1.057,0,1.915-0.857,1.915-1.915C85.953,48.943,85.096,48.085,84.039,48.085z"/><path d="M68.753,66.046c-0.748-0.748-1.96-0.748-2.708,0s-0.748,1.96,0,2.708l6.669,6.669c0.374,0.374,0.864,0.561,1.354,0.561   c0.49,0,0.98-0.187,1.354-0.561c0.748-0.748,0.748-1.96,0-2.708L68.753,66.046z"/></g></svg>`

	const PaintSVG = () => html`<svg style="height:22px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 511"><path d="M496.7 154.6l-78.4-.4c-5.7 0-10.3 4.6-9.9 10l24.3 321.1c.9 13.3 12.6 23.6 26.6 23.7 14 .1 25.5-10.2 26.3-23.5l21.1-320.8c.3-5.5-4.2-10.1-10-10.1zM448.6 132.4c33.8 6.8 62.6-17.8 61.4-48.3-.8-18.3-26.5-56.9-42.4-79-4.7-6.6-15.2-5-18 2.5-15.9 43.5-38.9 50.2-40.6 75.3-1.6 22.9 15.9 44.7 39.6 49.5zM306.8 1C180.5 1 2 51.8 2 255s178.5 254 304.8 254c126.3 0 25.4-113.7 25.4-254S433.1 1 306.8 1zm-254 254c0-28.1 22.7-50.8 50.8-50.8 28.1 0 50.8 22.7 50.8 50.8 0 28.1-22.7 50.8-50.8 50.8-28.1 0-50.8-22.7-50.8-50.8zm101.6 177.8c-28.1 0-50.8-22.7-50.8-50.8 0-28.1 22.7-50.8 50.8-50.8 28.1 0 50.8 22.7 50.8 50.8 0 28.1-22.7 50.8-50.8 50.8zm0-254c-28.1 0-50.8-22.7-50.8-50.8 0-28.1 22.7-50.8 50.8-50.8 28.1 0 50.8 22.7 50.8 50.8 0 28.1-22.7 50.8-50.8 50.8zm127 304.8c-28.1 0-50.8-22.7-50.8-50.8 0-28.1 22.7-50.8 50.8-50.8 28.1 0 50.8 22.7 50.8 50.8 0 28.1-22.7 50.8-50.8 50.8zm0-355.6c-28.1 0-50.8-22.7-50.8-50.8 0-28.1 22.7-50.8 50.8-50.8 28.1 0 50.8 22.7 50.8 50.8 0 28.1-22.7 50.8-50.8 50.8z"/></svg>`

	const siteData = {{siteData | dump | safe }}
  render(html`<${App} siteData="${siteData}"  />`, document.getElementById('preact-area'));
</script>
